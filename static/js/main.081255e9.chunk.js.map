{"version":3,"sources":["assets/Beep_Short.mp3","assets/Glass_Crunch.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","sound","Howl","src","soundURL","signalSound","signalSoundURL","App","video","useRef","mobilenetModule","classifier","useState","handon","setHandon","soundHandle","init","a","console","log","setupCamera","mobilenet","current","knnClassifier","alert","play","initNotifications","cooldown","Promise","resolve","reject","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","stream","srcObject","addEventListener","error","train","label","i","parseInt","trainProgress","embed","infer","addExample","sleep","run","predictClass","result","confidences","notify","body","ms","setTimeout","useEffect","on","className","ref","autoPlay","onClick","style","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.081255e9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Beep_Short.f19846ae.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Glass_Crunch.3572f2a8.mp3\";","import React, { useEffect, useRef, useState } from 'react';\nimport {Howl} from 'howler';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport * as knnClassifier from '@tensorflow-models/knn-classifier';\nimport { initNotifications, notify } from '@mycv/f8-notification';\nimport './App.css';\nimport soundURL from './assets/Beep_Short.mp3';\nimport signalSoundURL from './assets/Glass_Crunch.mp3';\n\nvar sound = new Howl({\n  src: [soundURL]\n});\nvar signalSound = new Howl({\n  src: [signalSoundURL]\n});\n\nfunction App() {\n\n  const video = useRef(); // read more about useRef in react\n  const mobilenetModule = useRef();\n  const classifier = useRef();\n\n  const [handon, setHandon] = useState(false);\n  const soundHandle = useRef(true);\n\n  const TRAINING_TIMES = 50;\n  const HAND_ON_LABEL = \"hand on\";\n  const HAND_OUT_LABEL = \"hand out\";\n  const DETECT_CONFIDENCE = 0.89;\n\n  \n  const init = async () => {\n    try{\n      console.log('init');\n      await setupCamera();\n      console.log(\"setup camera enter\");\n      // Load the model\n      mobilenetModule.current = await mobilenet.load();\n      // Create the classifier\n      classifier.current = knnClassifier.create();\n      console.log(\"setup success\");\n      console.log(\"Hand out and click train btn\");\n      alert(\"Everything is ready, use the app\");\n      signalSound.play();\n      // display noti\n      initNotifications({ cooldown: 3000 });\n    } catch {\n      alert(\"There is a problem, refresh the website\");\n    }\n  }\n  // ask to access user camera\n  const setupCamera = () => {\n    return new Promise((resolve,reject) => {\n      navigator.getUserMedia = navigator.getUserMedia ||\n        navigator.webkitGetUserMedia ||\n        navigator.mozGetUserMedia ||\n        navigator.msGetUserMedia;\n      \n      if(navigator.getUserMedia){\n        navigator.getUserMedia(\n          { video: true },\n          stream => {\n            video.current.srcObject = stream;\n            video.current.addEventListener('loadeddata', resolve) // load resolve\n          },\n          error => reject(error) // load reject\n        );\n      }\n      else {\n        reject();\n      }\n    });\n  }\n\n  const train = async label => {\n    try{\n      console.log(label + \" learning from video\");\n      for(let i=0;i<TRAINING_TIMES;i++){\n        console.log(`Loading ${parseInt((i+1)/TRAINING_TIMES*100)}%`);\n        await trainProgress(label);\n      }\n      console.log(\"Training end\");\n      signalSound.play();\n    } catch {\n      console.log(\"Read the instruction clearly, refresh the website\");\n    }\n  }\n\n  // use machine learning to learn image hand\n  const trainProgress = label => {\n    try {\n      return new Promise(async resolve => {\n        const embed = mobilenetModule.current.infer(\n          video.current, true\n        );\n        classifier.current.addExample(embed, label);\n        await sleep(100);\n        resolve();\n      })\n    } catch {\n      console.log(\"Read the instruction clearly and do it step by step, so refresh to use\");\n    }\n  }\n\n  const run = async () => {\n    try{\n      const embed = mobilenetModule.current.infer(\n      video.current, true\n      );\n      const result = await classifier.current.predictClass(embed);\n\n      if(result.label === HAND_ON_LABEL && result.confidences[result.label]>DETECT_CONFIDENCE) {\n        console.log(\"Hand on\");\n        // turn on noti there\n        if(soundHandle.current == true){\n          soundHandle.current = false;\n          sound.play();\n        }\n        notify('Let your hand out of face immediately', { body: 'Hey, do you know that keyboard contains lots of bacteria and virus, even dirtier than toilet. There is COVID around the world. Keep healthy for self and family' });\n        setHandon(true);\n      }\n      else{\n        console.log(\"Hand out\");\n        setHandon(false);\n      }\n      // run again in 1 seconds\n      await sleep(200);\n      run();\n    } catch {\n      alert(\"Data has not been entered through image hand training\")\n    }\n  }\n\n  // slow down speed of training\n  const sleep = (ms = 0) => {\n    return new Promise(resolve => {\n      setTimeout(resolve,ms);\n    })\n  }\n\n  useEffect(() => {\n    init();\n    console.log(\"it runs\")\n\n    // sound handle\n    sound.on('end', function(){\n      soundHandle.current = true;\n    });\n\n    // cleanup\n    return () => {\n\n    }\n  }, []);\n\n  const main = (\n    <div className={`main ${handon? \"handon\" : \" \"}`}>\n      <h1>WELCOME TO MY APP</h1>\n      <video\n        ref={video}\n        className=\"video\"\n        autoPlay\n      />\n      <div className=\"control\">\n        <button className=\"btn\" onClick={() => {\n          train(HAND_ON_LABEL);\n        }}>Train Hands on</button>\n        <button className=\"btn\" onClick={() => {\n          train(HAND_OUT_LABEL);\n        }}>Train Hands out</button>\n        <button className=\"btn\" onClick={() => {\n          run();\n        }}>Start</button>\n      </div>\n      <div className=\"ruleSet\">\n        <h2 className=\"heading\" style={{textAlign: 'center'}}>Read the instruction clearly before using the app</h2>\n        <ul className=\"list\">\n          <li className=\"steps\">1. Turn on camera</li>\n          <li className=\"steps\">2. Turn on notifications</li>\n          <li className=\"steps\">3. Wait for the beginning signal</li>\n          <li className=\"steps\">4. Put your hand in front of your screen and near the face so that it can be seen at the bottom of the webcam frame</li>\n          <li className=\"steps\">5. Click button Train Hands on, now move your hand freely towards the center of your face as long as it appears in the webcam frame, you can use both hands. Remember at least one of your hands appears in the frame. Do it for 10 seconds (until there is a signal on)</li>\n          <li className=\"steps\">6. Now put your hands down and click on button Train hands out, then you cannot put your hand so that it stays in the frame for 10 seconds (until a signal is on). Things in background should be the same too</li>\n          <li className=\"steps\">7. Click on Start button and enjoy the time working on the computer and your hands may not touch your face for clean, leave this page open and go to another window or tab to work</li>\n          <li className=\"steps\">8. Enjoy safe COVID outbreak</li>\n          <li className=\"steps\"><code>Best use on computer, some function may be missed on some mobiles</code></li>\n        </ul>\n      </div>\n      <div className=\"footer\">\n        <h3>Lee Sown 2020 - product learned from Internet</h3>\n      </div>\n    </div>\n  );\n  \n  return main;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}