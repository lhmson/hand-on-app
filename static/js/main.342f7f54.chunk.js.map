{"version":3,"sources":["assets/noti_out.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","sound","Howl","src","soundURL","App","video","useRef","mobilenetModule","classifier","useState","handon","setHandon","soundHandle","init","a","console","log","setupCamera","mobilenet","current","knnClassifier","initNotifications","cooldown","Promise","resolve","reject","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","stream","srcObject","addEventListener","error","train","label","i","parseInt","trainProgress","embed","infer","addExample","sleep","run","predictClass","result","confidences","play","notify","body","alert","ms","setTimeout","useEffect","on","className","ref","autoPlay","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.342f7f54.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noti_out.68be52cc.mp3\";","import React, { useEffect, useRef, useState } from 'react';\nimport {Howl} from 'howler';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport * as knnClassifier from '@tensorflow-models/knn-classifier';\nimport { initNotifications, notify } from '@mycv/f8-notification';\nimport './App.css';\nimport soundURL from './assets/noti_out.mp3';\n\nvar sound = new Howl({\n  src: [soundURL]\n});\n\nfunction App() {\n\n  const video = useRef(); // read more about useRef in react\n  const mobilenetModule = useRef();\n  const classifier = useRef();\n\n  const [handon, setHandon] = useState(false);\n  const soundHandle = useRef(true);\n\n  const TRAINING_TIMES = 50;\n  const HAND_ON_LABEL = \"hand on\";\n  const HAND_OUT_LABEL = \"hand out\";\n  const DETECT_CONFIDENCE = 0.89;\n  \n  const init = async () => {\n    console.log('init');\n    await setupCamera();\n    console.log(\"setup camera enter\");\n    // Load the model\n    mobilenetModule.current = await mobilenet.load();\n    // Create the classifier\n    classifier.current = knnClassifier.create();\n    console.log(\"setup success\");\n    console.log(\"Hand out and click train btn\");\n    // display noti\n    initNotifications({ cooldown: 3000 });\n  }\n  // ask to access user camera\n  const setupCamera = () => {\n    return new Promise((resolve,reject) => {\n      navigator.getUserMedia = navigator.getUserMedia ||\n        navigator.webkitGetUserMedia ||\n        navigator.mozGetUserMedia ||\n        navigator.msGetUserMedia;\n      \n      if(navigator.getUserMedia){\n        navigator.getUserMedia(\n          { video: true },\n          stream => {\n            video.current.srcObject = stream;\n            video.current.addEventListener('loadeddata', resolve) // load resolve\n          },\n          error => reject(error) // load reject\n        );\n      }\n      else {\n        reject();\n      }\n    });\n  }\n\n  const train = async label => {\n    console.log(label + \" learning from video\");\n    for(let i=0;i<TRAINING_TIMES;i++){\n      console.log(`Loading ${parseInt((i+1)/TRAINING_TIMES*100)}%`);\n      await trainProgress(label);\n    }\n    console.log(\"Training end\")\n  }\n\n  // use machine learning to learn image hand\n  const trainProgress = label => {\n    return new Promise(async resolve => {\n      const embed = mobilenetModule.current.infer(\n        video.current, true\n      );\n      classifier.current.addExample(embed, label);\n      await sleep(100);\n      resolve();\n    })\n  }\n\n  const run = async () => {\n    try{\n      const embed = mobilenetModule.current.infer(\n      video.current, true\n      );\n      const result = await classifier.current.predictClass(embed);\n\n      if(result.label === HAND_ON_LABEL && result.confidences[result.label]>DETECT_CONFIDENCE) {\n        console.log(\"Hand on\");\n        // turn on noti there\n        if(soundHandle.current == true){\n          soundHandle.current = false;\n          sound.play();\n        }\n        notify('Let your hand out of face immediately', { body: 'Hey, do you know that keyboard contains lots of bacteria and virus, even dirtier than toilet. There is COVID around the world. Keep healthy for yourself and family' });\n        setHandon(true);\n      }\n      else{\n        console.log(\"Hand out\");\n        setHandon(false);\n      }\n      // run again in 1 seconds\n      await sleep(200);\n      run();\n    } catch {\n      alert(\"Data has not been entered through image hand training\")\n    }\n  }\n\n  // slow down speed of training\n  const sleep = (ms = 0) => {\n    return new Promise(resolve => {\n      setTimeout(resolve,ms);\n    })\n  }\n\n  useEffect(() => {\n    init();\n    console.log(\"it runs\")\n\n    // sound handle\n    sound.on('end', function(){\n      soundHandle.current = true;\n    });\n\n    // cleanup\n    return () => {\n\n    }\n  }, []);\n  return (\n    <div className={`main ${handon? \"handon\" : \" \"}`}>\n      <h1>HELLO TO MY APP</h1>\n      <video\n        ref={video}\n        className=\"video\"\n        autoPlay\n      />\n      <div className=\"control\">\n        <button className=\"btn\" onClick={() => {\n          train(HAND_ON_LABEL);\n        }}>Train Hands on</button>\n        <button className=\"btn\" onClick={() => {\n          train(HAND_OUT_LABEL);\n        }}>Train Hands out</button>\n        <button className=\"btn\" onClick={() => {\n          run();\n        }}>Start</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}